From: =?utf-8?q?Timo_R=C3=B6hling?= <roehling@debian.org>
Date: Sat, 18 Nov 2023 20:59:50 +0100
Subject: Add install rules and option to use submodule dependencies

Origin: upstream, https://github.com/wjakob/nanobind/commit/5bde6527dc43535982a36ffa02d41275c5e484d9
---
 CMakeLists.txt              | 49 ++++++++++++++++++++++++++++++++++++++++++++-
 cmake/nanobind-config.cmake | 16 +++++++++++++--
 2 files changed, 62 insertions(+), 3 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2a37980..47054c7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -11,6 +11,9 @@ else()
   set(NB_MASTER_PROJECT OFF)
 endif()
 
+option(NB_CREATE_INSTALL_RULES "Create installation rules" ${NB_MASTER_PROJECT})
+option(NB_USE_SUBMODULE_DEPS   "Use the nanobind dependencies shipped as a git submodule of this repository" ON)
+
 option(NB_TEST              "Compile nanobind tests?" ${NB_MASTER_PROJECT})
 option(NB_TEST_STABLE_ABI   "Test the stable ABI interface?" OFF)
 option(NB_TEST_SHARED_BUILD "Build a shared nanobind library for the test suite?" OFF)
@@ -30,12 +33,56 @@ endif()
 # Check whether all dependencies are present
 # ---------------------------------------------------------------------------
 
-if (NOT IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/ext/robin_map/include")
+if (NB_USE_SUBMODULE_DEPS AND NOT IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/ext/robin_map/include")
   message(FATAL_ERROR "The nanobind dependencies are missing! "
     "You probably did not clone the project with --recursive. It is possible to recover "
     "by invoking\n$ git submodule update --init --recursive")
 endif()
 
+# ---------------------------------------------------------------------------
+# Installation rules
+# ---------------------------------------------------------------------------
+
+if(NB_CREATE_INSTALL_RULES AND NOT CMAKE_SKIP_INSTALL_RULES)
+  include(GNUInstallDirs)
+  set(NB_INSTALL_DATADIR "${CMAKE_INSTALL_DATADIR}/nanobind"
+    CACHE PATH "Installation path for read-only architecture-independent nanobind data files")
+
+  # Normally these would be configurable by the user, but we can't allow that
+  # because the lookup paths are hard-coded in 'cmake/nanobind-config.cmake'
+  set(CMAKE_INSTALL_INCLUDEDIR "${NB_INSTALL_DATADIR}/include")
+  set(NB_INSTALL_SRCDIR "${NB_INSTALL_DATADIR}/src")
+  set(NB_INSTALL_EXTDIR "${NB_INSTALL_DATADIR}/ext")
+  set(NB_INSTALL_CMAKEDIR "${NB_INSTALL_DATADIR}/cmake")
+
+  install(
+    DIRECTORY include/
+    DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
+  )
+
+  install(
+    DIRECTORY src/
+    DESTINATION "${NB_INSTALL_SRCDIR}"
+    PATTERN "*.py" EXCLUDE
+  )
+
+  if(NB_USE_SUBMODULE_DEPS)
+    install(
+      DIRECTORY ext/robin_map/include/
+      DESTINATION "${NB_INSTALL_EXTDIR}/robin_map/include"
+    )
+    install(
+      FILES ext/robin_map/CMakeLists.txt
+      DESTINATION "${NB_INSTALL_EXTDIR}/robin_map"
+    )
+  endif()
+
+  install(
+    DIRECTORY cmake/
+    DESTINATION "${NB_INSTALL_CMAKEDIR}"
+  )
+endif()
+
 # ---------------------------------------------------------------------------
 # Compile with a few more compiler warnings turned on
 # ---------------------------------------------------------------------------
diff --git a/cmake/nanobind-config.cmake b/cmake/nanobind-config.cmake
index 5c999da..a6ba3cd 100644
--- a/cmake/nanobind-config.cmake
+++ b/cmake/nanobind-config.cmake
@@ -202,8 +202,20 @@ function (nanobind_build_library TARGET_NAME)
   target_compile_definitions(${TARGET_NAME} PRIVATE
     $<${NB_OPT_SIZE}:NB_COMPACT_ASSERTIONS>)
 
-  target_include_directories(${TARGET_NAME} PRIVATE
-    ${NB_DIR}/ext/robin_map/include)
+  # If nanobind was installed without submodule dependencies, then the
+  # dependencies directory won't exist and we need to find them.
+  # However, if the directory _does_ exist, then the user is free to choose
+  # whether nanobind uses them (based on `NB_USE_SUBMODULE_DEPS`), with a
+  # preference to choose them if `NB_USE_SUBMODULE_DEPS` is not defined
+  if (NOT IS_DIRECTORY ${NB_DIR}/ext/robin_map/include OR
+      (DEFINED NB_USE_SUBMODULE_DEPS AND NOT NB_USE_SUBMODULE_DEPS))
+    include(CMakeFindDependencyMacro)
+    find_dependency(tsl-robin-map)
+    target_link_libraries(${TARGET_NAME} PRIVATE tsl::robin_map)
+  else()
+    target_include_directories(${TARGET_NAME} PRIVATE
+      ${NB_DIR}/ext/robin_map/include)
+  endif()
 
   target_include_directories(${TARGET_NAME} PUBLIC
     ${Python_INCLUDE_DIRS}
